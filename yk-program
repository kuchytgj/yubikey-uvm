#!/usr/bin/perl -w

use strict;

use Config::Simple;
use Data::Dumper;
use File::Basename;
use Getopt::Long;

use lib './';
use lib '/usr/local/src/yubikey-uvm/';
use Duo::API;
use Errors;

my $config_file = '/etc/duo/authapi.cfg';

my $config = new Config::Simple($config_file);

my $LSUSB_BIN = '/bin/lsusb';
my $MODHEX_BIN = '/usr/local/bin/modhex';
my $YKS_BIN = '/usr/local/src/yubikey-uvm/yk-status';
my $YKI_BIN = '/usr/local/src/yubikey-personalization/ykinfo';
my $YKP_BIN = '/usr/local/src/yubikey-personalization/ykpersonalize';

my $YK_VID = '1050';
my $YK_PID = '0010';

my $script_name = basename($0);

my $debug;
my $dryrun;
my $netid;

GetOptions(
	"debug" => \$debug,
	"dryrun" => \$dryrun,
	"netid=s" => \$netid,
);

sub usage {
	print "usage: $script_name --netid netid\n";
	print "Options:\n";
	print "     --netid          The netid to assign the current token to\n";
}

unless ($netid) {
	usage();
	exit $ERR_SYM{'YK_ERR'};
}

my $resp;
my $duo_api = Duo::API->new($config->param('IKEY'), $config->param('SKEY'), $config->param('APIHOST'));

# Check to make sure the user exists in Duo
eval {
	$resp = $duo_api->json_api_call('GET', '/admin/v1/users', {'username'=>$netid});
};

if ($@) {
	print STDERR 'ERR: ' . $@;
	exit $ERR_SYM{'YK_ERR'};
}

unless(scalar(@$resp)) {
	#TODO: Check if they are a valid NetID and create new account
	eval {
		$resp = $duo_api->json_api_call('POST', '/admin/v1/users', {'username'=>$netid});
	};

	if ($@) {
		print STDERR "Unable to create user's Duo Security account\n";
		exit $ERR_SYM{'YKERR_DUO'};
	}
	#print STDERR "No such user\n";
	#exit $ERR_SYM{'YKERR_NOUSER'};
	# The Duo retrieve user api call returns a list of user hashrefs
	# but create user returns a hashref so put it in list ref context
	$resp = [$resp];
};

my $user = shift(@$resp);
my $duo_user_id = $user->{'user_id'};

my $output = `$YKS_BIN`;
my $rc = $? >> 8;

unless (0 == $rc) {
	print STDERR "ERR: " . $output;
	exit $rc;
}

# Pull info from the YubiKey and generate new keys and public id
my $public_id = `$MODHEX_BIN -h \$(openssl rand -hex 6)`;
chomp $public_id;

my $aes_key = lc(`openssl enc -aes-128-cbc -k \$(openssl rand -base64 32) -nosalt -P|grep key=|tr -d 'key='`);
chomp $aes_key;

my $serial = `$YKI_BIN -s | grep -o -P '(\\d+)'`;
$rc = $? >> 8;
unless (0 == $rc) {
	print STDERR "ERR: Error getting YubiKey serial";
	exit $rc;
}
chomp $serial;

# We use a zeroed private id as this is only useful when the AES key is shared between multiple YubiKeys
#my $private_id = '0' x 12;
my $private_id = `openssl rand -hex 6`;

print "serial: $serial\n" if $debug;
print "public id: $public_id\n" if $debug;
print "private_id: $private_id\n" if $debug;
print "aes key: $aes_key\n" if $debug;

# See if token is duplicate
eval {
	$resp = $duo_api->json_api_call('GET', '/admin/v1/tokens', {'type'=>'yk', 'serial'=>$serial});
	if ($@) {
		print STDERR "Duo Security API failure";
		exit $ERR_SYM{'YKERR_DUO'};
	}
};

if (scalar(@$resp) > 0) {
	print STDERR "Duplicate YubiKey. This device already exists in Duo Security";
	exit $ERR_SYM{'YKERR_DUODUP'};
}

# Burn the info to the YubiKey
if ($dryrun) {
	$YKP_BIN .= ' -d';
}
my $out = `$YKP_BIN -y -1 -a$aes_key -ouid=$private_id -ofixed=$public_id -oserial-api-visible &> /dev/null`;

unless($dryrun) {
	eval {
		$resp = $duo_api->json_api_call('POST', '/admin/v1/tokens', {'type'=>'yk', 'serial' => $serial, 'private_id' => $private_id, 'aes_key' => $aes_key});
	};

	if ($@) {
		# don't die
		warn $@;
	}

	my $duo_token_id = $resp->{'token_id'};


	eval {
		$resp = $duo_api->json_api_call('POST', "/admin/v1/users/$duo_user_id/tokens", {'token_id'=>$duo_token_id});
	};

	if ($@) {
		warn $@;
	}
}

exit $ERR_SYM{'YK_NOERR'};
